#if !defined(SW_H)
#define SW_H

#include <stdint.h>

union sw_color {
	uint32_t u32;
	struct {
		uint8_t b;
		uint8_t g;
		uint8_t r;
		uint8_t a;
	};
};

enum sw_pointer_button_state {
	SW_POINTER_BUTTON_STATE_RELEASED,
	SW_POINTER_BUTTON_STATE_PRESSED,
};

enum sw_pointer_scroll_axis {
	SW_POINTER_AXIS_VERTICAL_SCROLL,
	SW_POINTER_AXIS_HORIZONTAL_SCROLL,
};

enum sw_surface_block_type {
	SW_SURFACE_BLOCK_TYPE_DEFAULT, // SW_SURFACE_BLOCK_TYPE_SPACER
	SW_SURFACE_BLOCK_TYPE_SPACER,
	SW_SURFACE_BLOCK_TYPE_TEXT,
	SW_SURFACE_BLOCK_TYPE_IMAGE,
	SW_SURFACE_BLOCK_TYPE_COMPOSITE,
};

enum sw_surface_block_anchor {
	SW_SURFACE_BLOCK_ANCHOR_DEFAULT, // SW_SURFACE_BLOCK_ANCHOR_LEFT
	SW_SURFACE_BLOCK_ANCHOR_TOP, // left in horizontal layouts
	SW_SURFACE_BLOCK_ANCHOR_RIGHT, // bottom in vertical layouts
	SW_SURFACE_BLOCK_ANCHOR_BOTTOM, // right in horizontal layouts
	SW_SURFACE_BLOCK_ANCHOR_LEFT, // top in vertical layouts
	SW_SURFACE_BLOCK_ANCHOR_CENTER,
	SW_SURFACE_BLOCK_ANCHOR_NONE, // use "x" and "y" to position
};

enum sw_surface_block_content_anchor {
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_DEFAULT, // SW_SURFACE_BLOCK_CONTENT_ANCHOR_LEFT_CENTER
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_LEFT_TOP,
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_LEFT_CENTER,
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_LEFT_BOTTOM,
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_CENTER_TOP,
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_CENTER_CENTER,
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_CENTER_BOTTOM,
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_RIGHT_TOP,
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_RIGHT_CENTER,
	SW_SURFACE_BLOCK_CONTENT_ANCHOR_RIGHT_BOTTOM,
};

enum sw_surface_block_expand {
	SW_SURFACE_BLOCK_EXPAND_NONE = 0,
	SW_SURFACE_BLOCK_EXPAND_LEFT = (1 << 1),
	SW_SURFACE_BLOCK_EXPAND_RIGHT = (1 << 2),
	SW_SURFACE_BLOCK_EXPAND_BOTTOM = (1 << 3),
	SW_SURFACE_BLOCK_EXPAND_TOP = (1 << 4),
	SW_SURFACE_BLOCK_EXPAND_CONTENT = (1 << 5),
};

#define SW_SURFACE_BLOCK_EXPAND_ALL_SIDES \
	(SW_SURFACE_BLOCK_EXPAND_LEFT | SW_SURFACE_BLOCK_EXPAND_RIGHT \
	| SW_SURFACE_BLOCK_EXPAND_BOTTOM | SW_SURFACE_BLOCK_EXPAND_TOP)

#define SW_SURFACE_BLOCK_EXPAND_ALL_SIDES_CONTENT \
	(SW_SURFACE_BLOCK_EXPAND_LEFT | SW_SURFACE_BLOCK_EXPAND_RIGHT \
	| SW_SURFACE_BLOCK_EXPAND_BOTTOM | SW_SURFACE_BLOCK_EXPAND_TOP \
	| SW_SURFACE_BLOCK_EXPAND_CONTENT)

enum sw_surface_block_content_transform {
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_DEFAULT, // SW_SURFACE_BLOCK_CONTENT_TRANSFORM_NORMAL
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_NORMAL,
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_90,
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_180,
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_270,
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_FLIPPED,
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_FLIPPED_90,
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_FLIPPED_180,
	SW_SURFACE_BLOCK_CONTENT_TRANSFORM_FLIPPED_270,
};

enum sw_surface_block_type_image_image_type {
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_DEFAULT, // SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_PIXMAP
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_PIXMAP, // format: uint32_t width, uint32_t height, ARGB32 pixels
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_PNG,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_JPG,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_SVG,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_TGA,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_BMP,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_PSD,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_GIF,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_HDR,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_PIC,
	SW_SURFACE_BLOCK_TYPE_IMAGE_IMAGE_TYPE_PNM,
};

enum sw_surface_block_type_composite_block_layout {
	SW_SURFACE_BLOCK_TYPE_COMPOSITE_BLOCK_LAYOUT_DEFAULT, // SW_SURFACE_BLOCK_TYPE_COMPOSITE_BLOCK_LAYOUT_HORIZONTAL
	SW_SURFACE_BLOCK_TYPE_COMPOSITE_BLOCK_LAYOUT_HORIZONTAL,
	SW_SURFACE_BLOCK_TYPE_COMPOSITE_BLOCK_LAYOUT_VERTICAL,
};

enum sw_surface_type {
	SW_SURFACE_TYPE_LAYER,
	SW_SURFACE_TYPE_POPUP,
};

enum sw_surface_cursor_shape {
	SW_SURFACE_CURSOR_SHAPE_DEFAULT_, // SW_SURFACE_CURSOR_SHAPE_DEFAULT
	// https://wayland.app/protocols/cursor-shape-v1#wp_cursor_shape_device_v1:enum:shape
	SW_SURFACE_CURSOR_SHAPE_DEFAULT,
	SW_SURFACE_CURSOR_SHAPE_CONTEXT_MENU,
	SW_SURFACE_CURSOR_SHAPE_HELP,
	SW_SURFACE_CURSOR_SHAPE_POINTER,
	SW_SURFACE_CURSOR_SHAPE_PROGRESS,
	SW_SURFACE_CURSOR_SHAPE_WAIT,
	SW_SURFACE_CURSOR_SHAPE_CELL,
	SW_SURFACE_CURSOR_SHAPE_CROSSHAIR,
	SW_SURFACE_CURSOR_SHAPE_TEXT,
	SW_SURFACE_CURSOR_SHAPE_VERTICAL_TEXT,
	SW_SURFACE_CURSOR_SHAPE_ALIAS,
	SW_SURFACE_CURSOR_SHAPE_COPY,
	SW_SURFACE_CURSOR_SHAPE_MOVE,
	SW_SURFACE_CURSOR_SHAPE_NO_DROP,
	SW_SURFACE_CURSOR_SHAPE_NOT_ALLOWED,
	SW_SURFACE_CURSOR_SHAPE_GRAB,
	SW_SURFACE_CURSOR_SHAPE_GRABBING,
	SW_SURFACE_CURSOR_SHAPE_E_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_N_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_NE_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_NW_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_S_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_SE_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_SW_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_W_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_EW_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_NS_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_NESW_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_NWSE_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_COL_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_ROW_RESIZE,
	SW_SURFACE_CURSOR_SHAPE_ALL_SCROLL,
	SW_SURFACE_CURSOR_SHAPE_ZOOM_IN,
	SW_SURFACE_CURSOR_SHAPE_ZOOM_OUT,
};

enum sw_surface_popup_gravity {
	SW_SURFACE_POPUP_GRAVITY_DEFAULT, // SW_SURFACE_POPUP_GRAVITY_NONE
	SW_SURFACE_POPUP_GRAVITY_NONE,
	SW_SURFACE_POPUP_GRAVITY_TOP,
	SW_SURFACE_POPUP_GRAVITY_BOTTOM,
	SW_SURFACE_POPUP_GRAVITY_LEFT,
	SW_SURFACE_POPUP_GRAVITY_RIGHT,
	SW_SURFACE_POPUP_GRAVITY_TOP_LEFT,
	SW_SURFACE_POPUP_GRAVITY_BOTTOM_LEFT,
	SW_SURFACE_POPUP_GRAVITY_TOP_RIGHT,
	SW_SURFACE_POPUP_GRAVITY_BOTTOM_RIGHT,
};

enum sw_surface_popup_constraint_adjustment {
	SW_SURFACE_POPUP_CONSTRAINT_ADJUSTMENT_NONE = 0,
	SW_SURFACE_POPUP_CONSTRAINT_ADJUSTMENT_SLIDE_X = 1,
	SW_SURFACE_POPUP_CONSTRAINT_ADJUSTMENT_SLIDE_Y = 2,
	SW_SURFACE_POPUP_CONSTRAINT_ADJUSTMENT_FLIP_X = 4,
	SW_SURFACE_POPUP_CONSTRAINT_ADJUSTMENT_FLIP_Y = 8,
	SW_SURFACE_POPUP_CONSTRAINT_ADJUSTMENT_RESIZE_X = 16,
	SW_SURFACE_POPUP_CONSTRAINT_ADJUSTMENT_RESIZE_Y = 32,
};

enum sw_surface_layer_anchor {
	SW_SURFACE_LAYER_ANCHOR_NONE = 0,
	SW_SURFACE_LAYER_ANCHOR_TOP = 1,
	SW_SURFACE_LAYER_ANCHOR_BOTTOM = 2,
	SW_SURFACE_LAYER_ANCHOR_LEFT = 4,
	SW_SURFACE_LAYER_ANCHOR_RIGHT = 8,
};

#define SW_SURFACE_LAYER_ANCHOR_ALL \
	(SW_SURFACE_LAYER_ANCHOR_TOP | SW_SURFACE_LAYER_ANCHOR_BOTTOM \
	| SW_SURFACE_LAYER_ANCHOR_LEFT | SW_SURFACE_LAYER_ANCHOR_RIGHT)

enum sw_surface_layer_layer {
	SW_SURFACE_LAYER_LAYER_DEFAULT, // SW_SURFACE_LAYER_LAYER_TOP
	SW_SURFACE_LAYER_LAYER_BACKGROUND,
	SW_SURFACE_LAYER_LAYER_BOTTOM,
	SW_SURFACE_LAYER_LAYER_TOP,
	SW_SURFACE_LAYER_LAYER_OVERLAY,
};

enum sw_output_transform {
	SW_OUTPUT_TRANSFORM_NORMAL,
	SW_OUTPUT_TRANSFORM_90,
	SW_OUTPUT_TRANSFORM_180,
	SW_OUTPUT_TRANSFORM_270,
	SW_OUTPUT_TRANSFORM_FLIPPED,
	SW_OUTPUT_TRANSFORM_FLIPPED_90,
	SW_OUTPUT_TRANSFORM_FLIPPED_180,
	SW_OUTPUT_TRANSFORM_FLIPPED_270,
};

#endif // SW_H
